---
import { ViewTransitions } from "astro:transitions";
import SetMap from "@/components/storykeep/controls/state/SetMap.tsx";
import { components as codeHookComponents } from "@/custom/CodeHook.astro";
import { getFullContentMap } from "@/utils/db/turso.ts";
import type { Theme, FullContentMap, Config } from "@/types.ts";

export interface Props {
  config: Config;
  title?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  ogImage?: string;
}

const {
  config,
  title = ``,
  ogImage,
  canonicalURL = Astro.url.pathname,
  pubDatetime,
  modDatetime,
} = Astro.props;

const defaultFavIcon = `/favicon.ico`;
const defaultSocialImageURL = ogImage || `/og.png`;
const defaultSocialLogoURL = `/oglogo.png`;
const defaultSocialTitle = typeof title === `string` && title ? title : `My first Tract Stack`;
const defaultSocialAuthor = `Tract Stack`;
const defaultSocialDesc = `No-code website builder and content marketing platform`;
const buildVersion = import.meta.env.BUILD_TIME || Date.now();
const socialImageWithVersion = `${defaultSocialImageURL}?v=${buildVersion}`;
const socialLogoWithVersion = `${defaultSocialLogoURL}?v=${buildVersion}`;
const contentMap: FullContentMap[] = await getFullContentMap();
---

<!doctype html>
<html lang="en" class="motion-safe:scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href={defaultFavIcon} />
    <link rel="canonical" href={config?.init?.SITE_URL + canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- Custom styles -->
    <link rel="stylesheet" href="/styles/custom.css" />
    <link rel="stylesheet" href="/styles/storykeep.css" />

    <!-- General Meta Tags -->
    <title>{defaultSocialTitle}</title>
    <meta name="title" content={defaultSocialTitle} />
    <meta name="description" content={defaultSocialDesc} />
    <meta name="author" content={defaultSocialAuthor} />
    <link rel="sitemap" href="/sitemap.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={defaultSocialTitle} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={defaultSocialDesc} />
    <meta property="og:url" content={config?.init?.SITE_URL + canonicalURL} />
    <meta property="og:image" content={socialImageWithVersion} />
    <meta property="og:logo" content={socialLogoWithVersion} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={config?.init?.SITE_URL + canonicalURL} />
    <meta property="twitter:title" content={defaultSocialTitle} />
    <meta property="twitter:description" content={defaultSocialDesc} />
    <meta property="twitter:image" content={defaultSocialLogoURL} />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <>
          <meta property="article:published_time" content={new Date(pubDatetime).toISOString()} />
        </>
      )
    }
    {
      modDatetime && (
        <>
          <meta property="article:modified_time" content={new Date(modDatetime).toISOString()} />
        </>
      )
    }

    <!-- Tract Stack Concierge -->
    <script>
      import {
        scrollToTop,
        handleResize,
        handleScroll,
        startLoadingAnimation,
        stopLoadingAnimation,
        debounce,
      } from "../utils/common/helpers";
      import { init } from "../utils/visit/init";

      const debouncedHandleScroll = debounce(handleScroll, 50);

      function setupEventHandlers() {
        document.addEventListener("astro:before-preparation", startLoadingAnimation);
        document.addEventListener("astro:after-swap", stopLoadingAnimation);
      }
      setupEventHandlers();

      document.addEventListener("astro:page-load", () => {
        init();
        handleScroll();
        handleResize();
        setupEventHandlers();
        scrollToTop();

        window.addEventListener(`resize`, handleResize);
        document.addEventListener("scroll", debouncedHandleScroll);
      });

      document.addEventListener("astro:before-preparation", () => {
        window.removeEventListener(`resize`, handleResize);
        document.removeEventListener("scroll", debouncedHandleScroll);
      });
    </script>

    <SetMap
      payload={contentMap}
      availableCodeHooks={Object.keys(codeHookComponents)}
      brand={config.init.BRAND_COLOURS || ``}
      theme={(config.init.THEME as Theme) || `light`}
      client:only="react"
    />
    <ViewTransitions />
  </head>
  <body class="w-full">
    <div
      id="loading-indicator"
      class="fixed top-0 left-0 w-full h-1 bg-myorange transform scale-x-0 transition-transform duration-300 ease-out z-50"
    >
    </div>
    <div id="content" class="transition-all duration-300">
      <slot />
    </div>
  </body>
</html>
