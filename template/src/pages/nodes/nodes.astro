---
import { isValidContentPath } from "../../utils/common/routeValidation";
import { ReactNodesRenderer } from "../../components/storykeep/compositor-nodes/ReactNodesRenderer";
import { getStoryFragmentNodeBySlug, buildNodesTreeFromFragmentNodes } from "../../store/nodes";
import { getGenerateAllNodes } from "../../utils/db/nodes/generate";
import AstroNodesRenderer from "../../components/storykeep/compositor-nodes/AstroNodesRenderer.astro";
import { getConfig, validateConfig } from "../../utils/core/config";
import Layout from "../../layouts/StoryKeep.astro";

const config = await getConfig();
const validation = await validateConfig(config);
if (!validation.isValid || !config) {
  return Astro.redirect("/storykeep/init");
}

const { slug } = Astro.params;
const lookup = slug || config?.init?.HOME_SLUG;
console.log("nodes slug: " + lookup);
if (slug === config.init?.HOME_SLUG) {
  return Astro.redirect("/");
}
if (!lookup) return Astro.redirect("/404");
if (!isValidContentPath(lookup)) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

const nodes = await getGenerateAllNodes();
buildNodesTreeFromFragmentNodes(nodes);

const storyfragmentNode = getStoryFragmentNodeBySlug(lookup);
if (!storyfragmentNode) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}
---

<Layout title="Nodes" pubDatetime={new Date()} modDatetime={new Date()} config={config}>
  <h1>Astro</h1>
  <AstroNodesRenderer slug={lookup} />

  <h1>React</h1>
  <ReactNodesRenderer id={storyfragmentNode.id} nodes={nodes} client:only="react" />

  <h1>Data</h1>
  <pre class="max-w-screen overflow-hidden">
  {JSON.stringify(nodes, null, 2)}
</pre>
</Layout>
