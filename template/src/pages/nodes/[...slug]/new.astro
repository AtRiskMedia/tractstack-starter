---
import { getConfig, validateConfig } from "../../../utils/core/config";
import { ReactNodesRenderer } from "../../../components/storykeep/compositor-nodes/ReactNodesRenderer";
import { getStoryFragmentNodeBySlug, buildNodesTreeFromFragmentNodes } from "../../../store/nodes";
import { getGenerateAllNodes } from "../../../utils/db/nodes/generate";
import StoryKeep from "../../../layouts/StoryKeep.astro";

const config = await getConfig();
const validation = await validateConfig(config);
if (!validation.isValid || !config) {
  return Astro.redirect("/storykeep/init");
}

const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");

const canonicalURL = `/${slug}`;

const nodes = await getGenerateAllNodes();
buildNodesTreeFromFragmentNodes(nodes);

const storyfragmentNode = getStoryFragmentNodeBySlug(slug);
if (!storyfragmentNode) {
  return Astro.redirect("/404");
}
---

<StoryKeep
  title={storyfragmentNode.title}
  pubDatetime={storyfragmentNode.created || new Date()}
  modDatetime={storyfragmentNode.changed || new Date()}
  ogImage={typeof storyfragmentNode?.socialImagePath === `string`
    ? storyfragmentNode.socialImagePath
    : undefined}
  config={config}
  canonicalURL={canonicalURL}
>
  <!-- Header -->
  <header id="mainHeader" class="fixed top-0 left-0 right-0 bg-blue-500 z-10">
    <div class="text-white p-4">Header</div>
  </header>
  <div id="headerSpacer"></div>

  <!-- Mobile Navigation (horizontal) -->
  <nav class="md:hidden fixed top-16 left-0 right-0 bg-purple-500 z-10">
    <div class="flex flex-wrap gap-4 justify-around p-3">
      <div class="w-8 h-8 rounded-full bg-white"></div>
      <div class="w-8 h-8 rounded-full bg-white"></div>
      <div class="w-8 h-8 rounded-full bg-white"></div>
      <div class="w-8 h-8 rounded-full bg-white"></div>
    </div>
  </nav>
  <div id="mobileNavSpacer" class="md:hidden"></div>

  <!-- Desktop Left Navigation -->
  <nav
    class="hidden md:flex fixed left-0 w-16 bg-purple-500 flex-col items-center py-4 space-y-6 z-10 h-screen"
  >
    <div class="w-8 h-8 rounded-full bg-white"></div>
    <div class="w-8 h-8 rounded-full bg-white"></div>
    <div class="w-8 h-8 rounded-full bg-white"></div>
    <div class="w-8 h-8 rounded-full bg-white"></div>
  </nav>

  <!-- Main Layout Container -->
  <div class="flex">
    <div class="hidden md:block w-16"></div>
    <!-- Desktop nav spacer -->

    <!-- Main Content Area -->
    <main class="flex-1 min-h-screen relative">
      <!-- Tools Panel -->
      <div
        id="toolsPanel"
        class="fixed top-[64px] md:top-16 left-0 md:ml-16 w-auto bg-yellow-500 rounded-br-lg shadow-lg z-10"
      >
        <div class="flex flex-wrap gap-4 p-4">
          <div class="w-8 h-8 rounded-full bg-white"></div>
          <div class="w-8 h-8 rounded-full bg-white"></div>
          <div class="w-8 h-8 rounded-full bg-white"></div>
          <div class="w-8 h-8 rounded-full bg-white"></div>
        </div>
      </div>

      <!-- Actual Content -->
      <div
        class={typeof storyfragmentNode.tailwindBgColour === `string`
          ? `bg-${storyfragmentNode.tailwindBgColour}`
          : ``}
      >
        <ReactNodesRenderer id={storyfragmentNode.id} nodes={nodes} client:only="react" />
      </div>
      <div
        class="h-96 m-0 p-0 flex flex-col bg-myblack w-full"
        style="background-image:repeating-linear-gradient( 45deg, transparent, transparent 10px, rgba(0,0,0, 0.1) 10px, rgba(0,0,0, 0.1) 20px )"
      >
      </div>
    </main>
  </div>

  <!-- Edit Panel 
  <div class="z-20 fixed bottom-0 right-0 bg-white shadow-lg w-full md:w-[500px]">
    <div class="overflow-y-auto" style="max-height: 50vh;">
      <div class="p-6">
        <h2 class="text-xl font-bold mb-4">Edit Panel</h2>
        <div class="space-y-4">
          <div class="h-16 bg-gray-200 rounded"></div>
          <div class="h-16 bg-gray-200 rounded"></div>
          <div class="h-16 bg-gray-200 rounded"></div>
          <div class="h-16 bg-gray-200 rounded"></div>
          <div class="h-16 bg-gray-200 rounded"></div>
          <div class="h-16 bg-gray-200 rounded"></div>
          <div class="h-16 bg-gray-200 rounded"></div>
          <div class="h-16 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>
  </div>
  -->

  <script>
    function updateSpacers() {
      // Header spacer
      const header = document.getElementById("mainHeader");
      const headerSpacer = document.getElementById("headerSpacer");
      if (header && headerSpacer) {
        headerSpacer.style.height = `${header.offsetHeight}px`;
      }

      // Mobile nav spacer - only if in mobile view
      const mobileNav = document.querySelector(".md\\:hidden.fixed");
      const mobileNavSpacer = document.getElementById("mobileNavSpacer");
      if (mobileNav && mobileNavSpacer && window.innerWidth < 768) {
        mobileNavSpacer.style.height = `${mobileNav.offsetHeight}px`;
      }
    }

    // Initial update
    updateSpacers();

    // Watch for DOM content to be fully loaded
    window.addEventListener("DOMContentLoaded", updateSpacers);

    // Watch for any dynamic content updates
    window.addEventListener("load", updateSpacers);

    // Watch for viewport changes
    window.addEventListener("resize", updateSpacers);

    // Watch for changes in element dimensions
    const observer = new ResizeObserver(updateSpacers);
    ["mainHeader", "toolsPanel"].forEach((id) => {
      const element = document.getElementById(id);
      if (element) {
        observer.observe(element);
        // Also observe all children for content changes
        element.querySelectorAll("*").forEach((child) => {
          observer.observe(child);
        });
      }
    });
  </script>
</StoryKeep>
