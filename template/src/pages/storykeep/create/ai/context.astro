---
import { ulid } from "ulid";
import StoryKeep from "../../../../layouts/StoryKeep.astro";
import CreateNewAiPage from "../../../../components/storykeep/components/CreateNewAiPage";
import { getSetupChecks } from "../../../../utils/setupChecks";
import { isTursoReady, getContentMap } from "../../../../api/turso";
import type { ContentMap } from "../../../../types";

// confirm set-up
const { hasTurso, hasConcierge, hasAssemblyAI } = getSetupChecks();
const notPreviewNotReady = hasConcierge && !hasTurso;
const hasTursoReady = !notPreviewNotReady ? await isTursoReady() : false;
if (!hasTursoReady) {
  return Astro.redirect("/storykeep");
}

const slug = `create`;
const newId = ulid();

const baseUrl = new URL(Astro.url.pathname, Astro.url);
const canonicalURL = new URL(`/context/${slug}`, baseUrl).href;

const contentMap: ContentMap[] = await getContentMap();
const contentMapSlugs = contentMap?.map((p: ContentMap) => p.slug) || [];
---

<StoryKeep
  title="Create New Context Page"
  pubDatetime={new Date()}
  modDatetime={null}
  canonicalURL={canonicalURL}
>
  <div id="storykeep-content">
    {
      hasAssemblyAI ? (
        <CreateNewAiPage
          mode="context"
          contentMapSlugs={contentMapSlugs}
          newId={newId}
          tractStackId={``}
          client:load
        />
      ) : (
        <>
          <div>AssemblyAI API key not found</div>
          <a
            class="text-myblue underline hover:text-black hover:underline-offset-2"
            href="/storykeep/settings"
          >
            Goto Settings
          </a>
        </>
      )
    }
  </div>
</StoryKeep>
