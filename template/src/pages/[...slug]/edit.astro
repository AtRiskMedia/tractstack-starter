---
import { getAPIContext } from "@/utils/api/astroContext";
import { components as codeHookComponents } from "@/custom/CodeHook.astro";
import { getConfig, validateConfig } from "@/utils/core/config";
import { ReactNodesWrapper } from "@/components/compositor-nodes/ReactNodesWrapper";
import { getCtx } from "@/store/nodes";
import { NodesDeserializer_Json } from "@/store/nodesDeserializer_Json";
import { getStoryFragmentBySlugFullRowData, getFullContentMap } from "@/utils/db/turso.ts";
import StoryKeepHeader from "@/components/storykeep/controls/StoryKeepHeader";
import StoryKeepToolBar from "@/components/storykeep/controls/StoryKeepToolBar";
import StoryKeepToolMode from "@/components/storykeep/controls/StoryKeepToolMode";
import SettingsPanel from "@/components/storykeep/controls/SettingsPanel";
import StoryKeep from "@/layouts/StoryKeep.astro";
import PullAnalytics from "@/components/storykeep/controls/recharts/PullAnalytics.tsx";
import { ulid } from "ulid";
import { getTractStackNode } from "@/utils/db/api/getTractStackNode";
import HudDisplay from "@/components/storykeep/HudDisplay";
import type { LoadData } from "@/store/nodesSerializer.ts";
import type { StoryFragmentNode } from "@/types";

const context = getAPIContext(Astro);
const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");

const tenantId = context.locals.tenant?.id || "default";
const config = await getConfig(Astro.locals.tenant?.paths.configPath, tenantId);
const validation = await validateConfig(config);
if ((!validation.isValid && slug !== `hello`) || !config) {
  return Astro.redirect("/storykeep/init");
}
const canonicalURL = slug === config.init?.HOME_SLUG ? "/" : `/${slug}`;

let loadData: LoadData = {};

if (slug === "create") {
  const contentMap = await getFullContentMap(context);
  const homeTractstack = contentMap.find(
    (item) =>
      item.type === "TractStack" &&
      item.slug.toLowerCase() === config.init.TRACTSTACK_HOME_SLUG.toLowerCase()
  );

  const tractstackNode = homeTractstack
    ? await getTractStackNode(homeTractstack.id, context)
    : null;
  if (!homeTractstack || !tractstackNode) {
    return new Response(null, {
      status: 404,
      statusText: "Home TractStack not found",
    });
  }
  const storyFragmentNode = {
    id: ulid(),
    nodeType: "StoryFragment",
    parentId: homeTractstack.id,
    title: "",
    slug: "",
    tailwindBgColour: `white`,
    paneIds: [],
    created: new Date(),
    changed: new Date(),
    hasMenu: false,
  } as StoryFragmentNode;

  loadData = {
    tractstackNodes: [tractstackNode],
    storyfragmentNodes: [storyFragmentNode],
  };
} else {
  const fullData = await getStoryFragmentBySlugFullRowData(slug, context);
  if (!fullData) {
    return new Response(null, {
      status: 404,
      statusText: "Not Found",
    });
  }

  const deserializer = new NodesDeserializer_Json();
  deserializer.processTractStackRowData(fullData.tractstack, loadData);
  deserializer.processStoryFragmentRowData(fullData.storyfragment, loadData);
  fullData.panes.forEach((pane) => {
    deserializer.processPaneRowData(pane, loadData);
  });
  if (fullData.menu) {
    deserializer.processMenuRowData(fullData.menu, loadData);
  }
}

getCtx().buildNodesTreeFromRowDataMadeNodes(loadData);

const storyfragmentNode =
  slug === "create" ? loadData.storyfragmentNodes?.[0] : getCtx().getStoryFragmentNodeBySlug(slug);

if (!storyfragmentNode) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}
---

<StoryKeep
  title={storyfragmentNode.title}
  pubDatetime={storyfragmentNode.created || new Date()}
  modDatetime={storyfragmentNode.changed || new Date()}
  ogImage={typeof storyfragmentNode?.socialImagePath === `string`
    ? storyfragmentNode.socialImagePath
    : `/images/og/${storyfragmentNode.id}.png`}
  config={config}
  canonicalURL={canonicalURL}
>
  <header id="mainHeader" class="fixed top-0 left-0 right-0 bg-mywhite z-[8999] drop-shadow">
    <StoryKeepHeader
      keyboardAccessibleEnabled={config.init?.KEYBOARD_ACCESSIBLE || false}
      nodeId={storyfragmentNode.id}
      isContext={false}
      client:only="react"
    />
    <PullAnalytics id={storyfragmentNode.id} client:only="react" />
  </header>
  <div id="headerSpacer"></div>

  <div class="flex min-h-screen">
    <nav
      id="mainNav"
      class="fixed bg-mywhite z-40 bottom-0
      left-0 right-0 pt-1.5
      md:bottom-auto md:left-0 md:top-0 md:w-16 md:h-screen md:pt-0"
    >
      <div
        class="flex flex-wrap gap-4 justify-around py-3.5
        md:flex-col md:items-center md:space-y-2 md:space-x-0 md:py-2 md:gap-8 md:mt-8"
      >
        <StoryKeepToolMode isContext={false} client:only="react" />
      </div>
    </nav>

    <nav id="toolbarNav" class="fixed w-full md:w-auto" style={{ zIndex: 9999 }}>
      <StoryKeepToolBar client:only="react" />
    </nav>

    <div class="hidden md:block w-16 flex-shrink-0"></div>

    <main class="flex-1 relative">
      <div class="bg-myblue/20 px-4 pb-28 min-h-screen bg-mylightgrey">
        <div
          style={{
            backgroundImage:
              "repeating-linear-gradient(135deg, transparent, transparent 10px, rgba(0,0,0,0.05) 10px, rgba(0,0,0,0.05) 20px)",
          }}
        >
          <ReactNodesWrapper
            id={storyfragmentNode.id}
            nodes={loadData}
            config={config}
            client:only="react"
          />
        </div>
      </div>
    </main>
  </div>

  <div
    id="bottom-right-controls"
    class="fixed right-0 flex flex-col items-end gap-2"
    style={{ zIndex: 10000, bottom: `var(--bottom-right-controls-bottom-offset)` }}
  >
    <HudDisplay client:only="react" />
    <SettingsPanel
      config={config}
      availableCodeHooks={Object.keys(codeHookComponents)}
      client:only="react"
    />
  </div>
</StoryKeep>

<script>
  import { setupLayoutObservers, setupLayoutStyles } from "@/utils/storykeep/layout";
  setupLayoutStyles();
  setupLayoutObservers();
</script>
