---
import AstroNodesRenderer from "@/components/storykeep/compositor-nodes/AstroNodesRenderer.astro";
import { ReactNodesWrapper } from "@/components/storykeep/compositor-nodes/ReactNodesWrapper";
import StoryKeep from "@/layouts/StoryKeep.astro";
import { getConfig } from "@/utils/core/config.ts";
import { getCtx } from "@/store/nodes";
import { getGenerateAllNodes } from "@/utils/db/migrate/generate";
import { NodesSerializer_Json } from "@/store/nodesSerializer_Json";
import { NodesDeserializer_Json } from "@/store/nodesDeserializer_Json";
import type {
  TractStackRowData,
  StoryFragmentRowData,
  MenuRowData,
  ResourceRowData,
  PaneRowData,
  ImageFileRowData,
  SaveData,
  LoadData,
} from "@/store/nodesSerializer.ts";

// uses old data source + helper fn to generate as new datum
const nodes = await getGenerateAllNodes();
// create node tree
getCtx().buildNodesTreeFromFragmentNodes(nodes);
// initialize serializer
const s = new NodesSerializer_Json();
// generate save data for all nodes (migrate to new data model)
const saveData: SaveData | null = nodes ? s.migrateAll(getCtx(), nodes) : null;

// now we need to convert saveData back to nodes

// initialize deserializer
const d = new NodesDeserializer_Json();
const loadData: LoadData = {
  files: [],
  menus: [],
  resources: [],
  storyfragments: [],
  panes: [],
  tractstacks: [],
  childNodes: [],
};

saveData?.tractstacks.forEach((n: TractStackRowData) => {
  d.processTractStackRowData(n, loadData);
});

saveData?.storyfragments.forEach((n: StoryFragmentRowData) => {
  d.processStoryFragmentRowData(n, loadData);
});

saveData?.panes.forEach((n: PaneRowData) => {
  d.processPaneRowData(n, loadData);
});

saveData?.menus.forEach((n: MenuRowData) => {
  d.processMenuRowData(n, loadData);
});

saveData?.files.forEach((n: ImageFileRowData) => {
  d.processImageFileRowData(n, loadData);
});

saveData?.resources.forEach((n: ResourceRowData) => {
  d.processResourceRowData(n, loadData);
});

// let's try building the node tree with this payload!
getCtx().buildNodesTreeFromRowDataMadeNodes(loadData);

//const dump = JSON.stringify(loadData);
// ---
// <h2>new data modal as though loaded from turso</h2>
// <pre>
// {dump}
// </pre>

const lookup = `hello`;
const storyfragmentNode = getCtx().getStoryFragmentNodeBySlug(lookup);

if (!storyfragmentNode) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

const config = await getConfig();
---

<StoryKeep
  title={storyfragmentNode.title}
  pubDatetime={storyfragmentNode.created || new Date()}
  modDatetime={storyfragmentNode.changed || new Date()}
  ogImage={typeof storyfragmentNode?.socialImagePath === `string`
    ? storyfragmentNode.socialImagePath
    : undefined}
  config={config!}
>
  <main id="main-content" class="w-full overflow-hidden">
    <div
      class={typeof storyfragmentNode.tailwindBgColour === `string`
        ? `bg-${storyfragmentNode.tailwindBgColour}`
        : ``}
    >
      <ReactNodesWrapper
        id={storyfragmentNode.id}
        nodes={nodes}
        config={config!}
        client:only="react"
      />
      <br />
      <br />
      <br />
      <AstroNodesRenderer id={storyfragmentNode.id} />
    </div>
  </main>
</StoryKeep>
