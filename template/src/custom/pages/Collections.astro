---
import type { ResourceNode, AuthStatus } from "@/types";
import { getAPIContext } from "@/utils/api/astroContext";
import { getConfig, validateConfig } from "@/utils/core/config.ts";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/common/Header.astro";
import Footer from "@/components/common/Footer.astro";
import { getMenuByIdRowData } from "@/utils/db/turso.ts";
import type { ExtractedResources } from "@/custom/utils/extractResources";

export interface Props {
  route: string;
  slug: string;
  variation?: string;
  resources: ExtractedResources;
}

// Hardcoded constants
const hardcodedMenuId = "01JXP63R451DWPMYESC59KM95V";

const { route, slug, resources /*, variation */ } = Astro.props;

const context = getAPIContext(Astro);
const user = Astro.locals.user as AuthStatus;
const tenantId = context.locals.tenant?.id || "default";
const config = await getConfig(Astro.locals.tenant?.paths.configPath, tenantId);
const validation = await validateConfig(config);

if (!validation.isValid || !config) {
  return Astro.redirect("/storykeep/init");
}

let menuPayload = null;
const menuRowData = await getMenuByIdRowData(hardcodedMenuId, context);
if (menuRowData) {
  try {
    const options = JSON.parse(menuRowData.options_payload);
    menuPayload = {
      id: menuRowData.id,
      title: menuRowData.title,
      theme: menuRowData.theme,
      optionsPayload: options,
    };
  } catch (error) {
    console.error("Error parsing menu options_payload:", error);
  }
}

const targetSlug = `${route}-${slug}`;
const categoryResources = resources[route] || [];
const activeResource = categoryResources.find(
  (resource: ResourceNode) => resource.slug === targetSlug
);

const pageTitle = `${route}=${slug}`;
---

<Layout
  title={pageTitle}
  pubDatetime={new Date()}
  modDatetime={new Date()}
  canonicalURL={Astro.url.pathname}
  ogImage={`/images/og/collections.png`}
  config={config}
  id="collections-page"
>
  <Header
    title={pageTitle}
    menu={menuPayload}
    slug={slug}
    isContext={false}
    isEditable={false}
    impressions={[]}
    user={user}
    config={config}
  />

  <main id="main-content" class="w-full">
    <div class="bg-white">
      {
        slug ? (
          <div>
            <p>
              You are on {route}={slug} collection page
            </p>
            <p>Active resource: {JSON.stringify(activeResource)}</p>
            <p>Extracted resources: {JSON.stringify(resources)}</p>
          </div>
        ) : null
      }
    </div>
  </main>

  <Footer
    created={new Date()}
    menuId={hardcodedMenuId}
    backToTop={true}
    slug={slug}
    isContext={false}
    config={config}
  />
</Layout>
