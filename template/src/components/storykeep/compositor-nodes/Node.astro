---
import { allNodes } from "../../../store/nodes";
import type { BaseNode, FlatNode } from "../../../types.ts";
import Root from "./nodes/Root.astro";
import Pane from "./nodes/Pane.astro";
import StoryFragment from "./nodes/StoryFragment.astro";
import Markdown from "./nodes/Markdown.astro";
import BgPaneWrapper from "./nodes/BgPaneWrapper.astro";
import TagElement from "./nodes/TagElement.astro";
import NodeText from "./nodes/tagElements/NodeText.astro";
import NodeImg from "./nodes/tagElements/NodeImg.astro";
import NodeA from "./nodes/tagElements/NodeA.astro";
import { NodeButton } from "@/components/storykeep/compositor-nodes/nodes/tagElements/NodeButton.tsx";
import NodeBasicTag from "./nodes/tagElements/NodeBasicTag.astro";
import EmptyNode from "./nodes/tagElements/EmptyNode.astro";
import Widget from "./nodes/Widget.astro";

const { nodeId } = Astro.props;
const node = allNodes.get()?.get(nodeId) as FlatNode;
let type = node.nodeType as string;
if ("tagName" in node) {
  type = node.tagName!;
}

// Helper function to parse code hooks
function parseCodeHook(node: BaseNode | FlatNode) {
  // First check if we have codeHookParams
  if ("codeHookParams" in node && Array.isArray(node.codeHookParams)) {
    const regexpHook =
      /^(identifyAs|youtube|bunny|bunnyContext|toggle|resource|belief|signup)\((.*)\)$/;
    const hookMatch = node.copy?.match(regexpHook);

    if (!hookMatch) return null;

    return {
      hook: hookMatch[1],
      value1: node.codeHookParams[0] || null,
      value2: node.codeHookParams[1] || null,
      value3: node.codeHookParams[2] || "",
    };
  }

  // Type guard to check if it's a FlatNode with children
  if ("children" in node && Array.isArray(node.children)) {
    const firstChild = node.children[0];
    if (!firstChild?.value) return null;

    const regexpHook =
      /(identifyAs|youtube|bunny|bunnyContext|toggle|resource|belief|signup)\((.*?)\)/;
    const regexpValues = /((?:[^\\|]+|\\\|?)+)/g;
    const hookMatch = firstChild.value.match(regexpHook);

    if (!hookMatch) return null;

    const hook = hookMatch[1];
    const hookValuesRaw = hookMatch[2].match(regexpValues);

    return {
      hook,
      value1: hookValuesRaw?.[0] || null,
      value2: hookValuesRaw?.[1] || null,
      value3: hookValuesRaw?.[2] || "",
    };
  }

  return null;
}

function getElement(type: string) {
  switch (type) {
    case "Root":
      return Root;
    case "Pane":
      return Pane;
    case "StoryFragment":
      return StoryFragment;
    case "Markdown":
      return Markdown;
    case "BgPane":
      return BgPaneWrapper;
    case "TagElement":
      return TagElement;
    // tag elements
    case "h2":
    case "h3":
    case "h4":
    case "p":
    case "em":
    case "strong":
    case "li":
    case "ol":
    case "ul":
    case "aside":
      return NodeBasicTag;
    case "text":
      return NodeText;
    case "img":
      return NodeImg;
    case "a":
      return NodeA;
    case "code":
      const hookData = parseCodeHook(node);
      return hookData ? Widget : EmptyNode;
    case "Impression":
      return EmptyNode;
    default:
      console.log(`Node.astro miss on ${type}`);
      return EmptyNode;
  }
}

const RenderElement = node ? getElement(type) : EmptyNode;
const hookData = type === "code" ? parseCodeHook(node) : null;
---

{
  type === "button" ? (
    <NodeButton nodeId={nodeId} client:visible />
  ) : type === "code" && hookData ? (
    <RenderElement {...hookData} nodeId={nodeId} />
  ) : (
    <RenderElement tagName={type} nodeId={nodeId} />
  )
}
