---
import CodeHook from "../../../../custom/CodeHook.astro";
import {
  getNodeSlug,
  getNodeClasses,
  getNodeStyles,
  getNodeCodeHookPayload,
  getChildNodeIDs,
  getPaneBeliefs,
} from "../../../../store/nodes";
import { viewportStore } from "../../../../store/storykeep";
import Node from "../Node.astro";
import Filter from "../../../../components/frontend/state/Filter";

const { nodeId } = Astro.props;
const codeHookPayload = getNodeCodeHookPayload(nodeId);
const beliefs = getPaneBeliefs(nodeId);
const wrapperClasses = `grid ${getNodeClasses(nodeId, viewportStore.get().value)}`;
const contentClasses = "relative w-full h-auto justify-self-start";
const contentStyles = {
  ...getNodeStyles<string>(nodeId, viewportStore.get().value),
  gridArea: "1/1/1/1",
};
---

{
  beliefs !== null && (
    <Filter
      client:load
      id={nodeId}
      heldBeliefs={beliefs.heldBeliefs}
      withheldBeliefs={beliefs.withheldBeliefs}
    />
  )
}
{
  codeHookPayload ? (
    <div id={`pane-${nodeId}`}>
      <CodeHook target={codeHookPayload.target} resources={[]} options={null} />
    </div>
  ) : (
    <div id={`pane-${nodeId}`}>
      <div id={getNodeSlug(nodeId)} class={wrapperClasses}>
        <div class={contentClasses} style={contentStyles}>
          {getChildNodeIDs(nodeId).map((childId: string) => (
            <Node nodeId={childId} />
          ))}
        </div>
      </div>
    </div>
  )
}
