---
import type { BgImageNode } from "@/types";

interface Props {
  payload: BgImageNode;
}

const { payload } = Astro.props;

const isHiddenOnViewport = (viewport: "Mobile" | "Tablet" | "Desktop"): boolean => {
  const key = `hiddenViewport${viewport}` as keyof BgImageNode;
  return !!payload[key];
};

const buildResponsiveClass = (): string => {
  const hiddenMobile = isHiddenOnViewport("Mobile");
  const hiddenTablet = isHiddenOnViewport("Tablet");
  const hiddenDesktop = isHiddenOnViewport("Desktop");

  const classes = [];

  if (hiddenMobile) classes.push("hidden xs:hidden");
  else classes.push("block");

  if (hiddenTablet) classes.push("md:hidden");
  else if (hiddenMobile) classes.push("md:block");

  if (hiddenDesktop) classes.push("xl:hidden");
  else if (hiddenTablet) classes.push("xl:block");

  return classes.join(" ");
};
---

<div
  class={`w-full h-full absolute top-0 left-0 ${buildResponsiveClass()}`}
  style={{
    backgroundImage: `url(${payload.src})`,
    backgroundSize: payload.objectFit || "cover",
    backgroundRepeat: "no-repeat",
    backgroundPosition: "center",
    zIndex: 0,
  }}
  role="img"
  aria-label={payload.alt || "Background image"}
>
</div>
