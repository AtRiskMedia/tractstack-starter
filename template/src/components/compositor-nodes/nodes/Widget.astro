---
import { YouTubeWrapper } from "@/components/frontend/widgets/YouTubeWrapper.tsx";
import BunnyVideo from "@/components/frontend/widgets/BunnyVideo.astro";
import { Belief } from "@/components/frontend/widgets/Belief.tsx";
import { IdentifyAs } from "@/components/frontend/widgets/IdentifyAs.tsx";
import { ToggleBelief } from "@/components/frontend/widgets/ToggleBelief.tsx";
import { SignUp } from "@/components/frontend/widgets/SignUp.tsx";
import { getCtx } from "@/store/nodes.ts";

interface Props {
  nodeId: string;
  hook: string | null;
  value1: string | null;
  value2: string | null;
  value3: string;
}

const { nodeId, hook, value1, value2, value3 = "" } = Astro.props;
const classNames = getCtx().getNodeClasses(nodeId, `auto`);
---

{
  hook === "youtube" && value1 && value2 ? (
    <div class={classNames}>
      <YouTubeWrapper client:only="react" embedCode={value1} title={value2} />
    </div>
  ) : null
}

{
  hook === "bunny" && value1 && value2 ? (
    <div class={classNames}>
      <BunnyVideo videoUrl={value1} title={value2} />
    </div>
  ) : null
}

{
  hook === "signup" && value1 ? (
    <div class={classNames}>
      <SignUp
        client:only="react"
        persona={value1 ?? "Major Updates Only"}
        prompt={value2 ?? "Keep in touch!"}
        clarifyConsent={value3 === "true"}
      />
    </div>
  ) : null
}

{
  hook === "belief" && value1 && value2 ? (
    <div class={classNames}>
      <Belief client:only="react" value={{ slug: value1, scale: value2, extra: value3 }} />
    </div>
  ) : null
}

{
  hook === "identifyAs" && value1 && value2 ? (
    <IdentifyAs
      client:visible
      value={{ slug: value1, target: value2, extra: value3 }}
      classNames={classNames}
    />
  ) : null
}

{
  hook === "toggle" && value1 && value2 ? (
    <div class={classNames}>
      <ToggleBelief client:visible belief={value1} prompt={value2} />
    </div>
  ) : null
}

{
  hook === "resource" && value1 ? (
    <div class={classNames}>
      <div>
        <strong>Resource Template (not yet implemented):</strong> {value1}, {value2}
      </div>
    </div>
  ) : null
}
