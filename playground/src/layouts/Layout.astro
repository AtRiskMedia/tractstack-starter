---
import { getAPIContext } from "@/utils/api/astroContext";
import { ClientRouter } from "astro:transitions";
import { joinUrlPaths } from "@/utils/common/helpers";
import { getFullContentMap } from "@/utils/db/turso";
import type { Config, FullContentMap } from "@/types";

export interface Props {
  config: Config;
  title?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  ogImage?: string;
  id?: string;
}

const {
  config,
  title = ``,
  ogImage,
  canonicalURL = Astro.url.pathname,
  pubDatetime,
  modDatetime,
  id,
} = Astro.props;

const context = getAPIContext(Astro);
const contentMap: FullContentMap[] = await getFullContentMap(context);
let storyFragmentDescription;
if (id) {
  const storyFragment = contentMap.find(
    (item) => item.id === id && item.type === "StoryFragment"
  ) as (FullContentMap & { description?: string }) | undefined;

  if (storyFragment && storyFragment.description) {
    storyFragmentDescription = storyFragment.description;
  }
}

// Determine CSS based on multi-tenant mode
const tenantId = context.locals.tenant?.id || "default";
const isMultiTenant =
  import.meta.env.PUBLIC_ENABLE_MULTI_TENANT === "true" && tenantId !== `default`;
const stylesUrl = isMultiTenant
  ? "/styles/storykeep.css" // Use storykeep.css for multi-tenant mode
  : config.init.STYLES_VER
    ? `/api/styles/frontend.css?v=${config?.init?.STYLES_VER}` // Generated frontend.css for single-tenant
    : "/styles/app.css"; // Fallback for single-tenant

const defaultFavIcon = `/favicon.ico`;
const defaultSocialImageURL = ogImage || config.init.OG || `/og.png`;
const defaultSocialLogoURL = config.init.OGLOGO || `/oglogo.png`;
const defaultSocialTitle =
  typeof title === `string` && title
    ? title
    : typeof config.init.OGTITLE === `string`
      ? config.init.OGTITLE
      : `My first Tract Stack`;
const defaultSocialAuthor = config.init.OGAUTHOR || `Tract Stack`;
const defaultSocialDesc =
  storyFragmentDescription ||
  config.init.OGDESC ||
  `No-code website builder and content marketing platform`;
const buildVersion = (() => {
  if (modDatetime) return modDatetime.getTime();
  if (pubDatetime) return pubDatetime.getTime();
  return Date.now();
})();
const socialImageWithVersion = joinUrlPaths(
  config?.init?.SITE_URL || ``,
  `${defaultSocialImageURL}?v=${buildVersion}`
);
const socialLogoWithVersion = joinUrlPaths(
  config?.init?.SITE_URL || ``,
  `${defaultSocialLogoURL}?v=${buildVersion}`
);
const gtagId = config?.init?.GTAG || false;
const gtagUrl =
  typeof gtagId === `string` && gtagId.length > 1
    ? `https://www.googletagmanager.com/gtag/js?id=${gtagId}`
    : null;
const fullCanonicalUrl = joinUrlPaths(config?.init?.SITE_URL || ``, canonicalURL);
---

<!doctype html>
<html lang="en" class="motion-safe:scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <link rel="icon" type="image/svg+xml" href={defaultFavIcon} />
    <link rel="canonical" href={fullCanonicalUrl} />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href="/styles/custom.css" />
    <link rel="stylesheet" href={stylesUrl} />
    <link rel="sitemap" href="/sitemap.xml" />

    <!-- General Meta Tags -->
    <title>{defaultSocialTitle}</title>
    <meta name="title" content={defaultSocialTitle} />
    <meta name="description" content={defaultSocialDesc} />
    <meta name="author" content={defaultSocialAuthor} />
    <meta
      property="og:site_name"
      content={config?.init?.OGAUTHOR || config?.init?.OGTITLE || "Tract Stack"}
    />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content={`${defaultSocialTitle} - Social Preview Image`} />
    <meta property="og:locale" content="en_US" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={defaultSocialTitle} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={defaultSocialDesc} />
    <meta property="og:url" content={fullCanonicalUrl} />
    <meta property="og:image" content={socialImageWithVersion} />
    <meta property="og:logo" content={socialLogoWithVersion} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={fullCanonicalUrl} />
    <meta property="twitter:title" content={defaultSocialTitle} />
    <meta property="twitter:description" content={defaultSocialDesc} />
    <meta property="twitter:image" content={socialImageWithVersion} />

    <!-- Article Published/Modified time -->
    {pubDatetime && <meta property="article:published_time" content={pubDatetime.toISOString()} />}
    {modDatetime && <meta property="article:modified_time" content={modDatetime.toISOString()} />}

    <!-- Google Analytics -->
    {gtagUrl && <script async src={gtagUrl} is:inline />}
    <script is:inline define:vars={{ gtagId: config?.init?.GTAG || "" }}>
      (function () {
        if (gtagId && gtagId.length > 1) {
          window.dataLayer = window.dataLayer || [];
          window.gtag =
            window.gtag ||
            function () {
              window.dataLayer.push(arguments);
            };

          window.gtag("js", new Date());
          window.gtag("config", gtagId);

          document.addEventListener("astro:after-swap", () => {
            window.gtag("config", gtagId);
          });
        }
      })();
    </script>

    <!-- Bunny player.js -->
    <script
      is:inline
      type="text/javascript"
      src="//assets.mediadelivery.net/playerjs/player-0.1.0.min.js"></script>

    <!-- Tract Stack Concierge -->
    <script>
      import {
        scrollToTop,
        handleResize,
        handleScroll,
        startLoadingAnimation,
        stopLoadingAnimation,
      } from "../utils/common/helpers";
      import { eventStream } from "../utils/events/eventStream";
      import { inView } from "../utils/events/inView";
      import { eventProcessQueue } from "../utils/events/eventProcessQueue";
      import { init } from "../utils/visit/init";
      import type { EventStreamController } from "../types";

      let eventStreamController: EventStreamController | null = null;
      function setupEventHandlers() {
        if (!eventStreamController) {
          eventStreamController = eventStream() as EventStreamController;
        }
        eventProcessQueue();
        document.addEventListener("astro:before-preparation", startLoadingAnimation);
        document.addEventListener("astro:after-swap", stopLoadingAnimation);
      }
      setupEventHandlers();

      document.addEventListener("astro:page-load", () => {
        init();
        handleScroll();
        handleResize();
        inView();
        setupEventHandlers();
        scrollToTop();

        window.addEventListener(`resize`, handleResize);
      });

      document.addEventListener("astro:before-swap", () => {
        eventProcessQueue();
      });

      document.addEventListener("astro:before-preparation", () => {
        if (eventStreamController) {
          eventStreamController.stop();
          eventStreamController = null;
        }
        window.removeEventListener(`resize`, handleResize);
        if ((window as any).__scrollToTopObserver) {
          (window as any).__scrollToTopObserver.disconnect();
        }
      });
    </script>

    <ClientRouter />
  </head>
  <body class="w-full">
    <div
      id="loading-indicator"
      class="fixed top-0 left-0 w-full h-1 bg-myorange transform scale-x-0 transition-transform duration-300 ease-out z-50"
    >
    </div>
    <div id="content" class="transition-opacity duration-300">
      <slot />
    </div>
  </body>
</html>
