---
import { allNodes } from "../../../store/nodes";
import type { BaseNode, FlatNode } from "../../../types.ts";
import Root from "./nodes/Root.astro";
import Pane from "./nodes/Pane.astro";
import StoryFragment from "./nodes/StoryFragment.astro";
import Markdown from "./nodes/Markdown.astro";
import TagElement from "./nodes/TagElement.astro";
import NodeText from "./nodes/tagElements/NodeText.astro";
import NodeImg from "./nodes/tagElements/NodeImg.astro";
import NodeA from "./nodes/tagElements/NodeA.astro";
import NodeBasicTag from "./nodes/tagElements/NodeBasicTag.astro";
import EmptyNode from "./nodes/tagElements/EmptyNode.astro";

const { nodeId } = Astro.props;
const node = allNodes.get()?.get(nodeId) as FlatNode;
let type = node.nodeType as string;
if ('tagName' in node) {
  type = node.tagName!;
}

function getElement(type: string) {
  switch (type) {
    case "Root": return Root;
    case "Pane": return Pane;
    case "StoryFragment": return StoryFragment;
    case "Markdown": return Markdown;
    case "TagElement": return TagElement;
    // tag elements
    case "h2":
    case "h3":
    case "p":
    case "em":
    case "strong":
    case "li":
    case "ol":
    case "ul": return NodeBasicTag;

    case "text": return NodeText;
    case "img": return NodeImg;
    case "a": return NodeA;
    default:return EmptyNode;
  }
}
const RenderElement = node ? getElement(node, type) : EmptyNode;
---
<RenderElement tagName={type} nodeId={nodeId}/>