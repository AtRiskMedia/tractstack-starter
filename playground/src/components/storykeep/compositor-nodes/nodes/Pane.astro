---
import CodeHook from "@/custom/CodeHook.astro";
import { getCtx } from "@/store/nodes.ts";
import Node from "../Node.astro";
import Filter from "@/components/frontend/state/Filter.tsx";
import type { CodeHookDatum } from "@/types.ts";

const { nodeId } = Astro.props;
const rawPayload = getCtx().getNodeCodeHookPayload(nodeId);
const codeHookPayload =
  rawPayload && typeof rawPayload === "object" && "target" in rawPayload
    ? (rawPayload as CodeHookDatum)
    : null;
const beliefs = getCtx().getPaneBeliefs(nodeId);
const isDecorative = getCtx().getPaneIsDecorative(nodeId);
const wrapperClasses = `grid ${getCtx().getNodeClasses(nodeId, `auto`)}`;
const contentClasses = "relative w-full h-auto justify-self-start";
const contentStyles = getCtx().getNodeStringStyles(nodeId, `auto`) + "; grid-area: 1/1/1/1";
---

{
  beliefs !== null && (
    <Filter
      client:load
      id={nodeId}
      heldBeliefsFilter={beliefs.heldBeliefs}
      withheldBeliefsFilter={beliefs.withheldBeliefs}
    />
  )
}
{
  codeHookPayload ? (
    <div id={`pane-${nodeId}`} class={isDecorative ? `` : `pane`}>
      <CodeHook target={codeHookPayload.target} resources={[]} options={null} />
    </div>
  ) : (
    <div id={`pane-${nodeId}`} class={isDecorative ? `` : `pane`}>
      <div id={getCtx().getNodeSlug(nodeId)} class={wrapperClasses}>
        <div class={contentClasses} style={contentStyles}>
          {getCtx()
            .getChildNodeIDs(nodeId)
            .map((childId: string) => (
              <Node nodeId={childId} />
            ))}
        </div>
      </div>
    </div>
  )
}
