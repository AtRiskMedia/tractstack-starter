---
import { YouTubeWrapper } from "../../components/other/YouTubeWrapper";
import BunnyVideo from "../../components/other/BunnyVideo.astro";
import { Belief } from "../../components/widgets/Belief";
import { IdentifyAs } from "../../components/widgets/IdentifyAs";
import { ToggleBelief } from "../../components/widgets/ToggleBelief";
import { SignUp } from "../../components/widgets/SignUp";
import { AstToButton } from "../../components/panes/AstToButton";
import { lispLexer } from "../../utils/concierge/lispLexer";
import { preParseAction } from "../../utils/concierge/preParseAction";
import { getGlobalNth } from "../../utils/compositor/markdownUtils";
import type { ButtonData, FileNode, MarkdownLookup } from "../../types";

interface Props {
  payload: {
    ast: any[];
    imageData: FileNode[];
    buttonData: { [key: string]: ButtonData };
  };
  thisClassNames: { [key: string]: string | string[] };
  paneId: string;
  slug: string;
  isContext: boolean;
  idx: number | null;
  outerIdx: number;
  markdownLookup: MarkdownLookup;
}

const {
  payload,
  thisClassNames,
  paneId,
  slug,
  isContext,
  idx = null,
  outerIdx,
  markdownLookup,
} = Astro.props;

const thisAst = payload.ast.at(0);
const Tag = thisAst?.tagName || thisAst?.type;
const globalNth = getGlobalNth(Tag, idx, outerIdx, markdownLookup);
const outerGlobalNth =
  [`p`, `ul`, `ol`, `h1`, `h2`, `h3`, `h4`, `h5`, `h6`].includes(Tag) &&
  markdownLookup?.nthTagLookup[Tag] &&
  markdownLookup.nthTagLookup[Tag][outerIdx] &&
  markdownLookup.nthTagLookup[Tag][outerIdx].nth;

const injectClassNames =
  typeof thisAst?.tagName === `undefined`
    ? ``
    : typeof thisClassNames[Tag] === `string`
      ? (thisClassNames[Tag] as string)
      : typeof thisClassNames[Tag] === `object` &&
          typeof outerGlobalNth === `number` &&
          thisClassNames[Tag].length >= outerGlobalNth + 1
        ? (thisClassNames[Tag][outerGlobalNth] as string)
        : typeof thisClassNames[Tag] === `object` &&
            typeof globalNth === `number` &&
            !outerGlobalNth &&
            thisClassNames[Tag].length >= globalNth + 1
          ? (thisClassNames[Tag][globalNth] as string)
          : typeof thisClassNames[Tag] === `object`
            ? (thisClassNames[Tag][0] as string)
            : ``;

// applies only when Tag === `a`
// Tag === `a` and has buttonPayload is rendered in an island
const buttonPayload =
  typeof thisAst.properties?.href === `string` &&
  thisAst.children[0]?.type === `text` &&
  typeof thisAst.children[0]?.value === `string` &&
  typeof payload?.buttonData === `object` &&
  Object.keys(payload?.buttonData).length &&
  thisAst.properties?.href &&
  typeof payload?.buttonData[thisAst.properties.href] !== `undefined`
    ? payload.buttonData[thisAst.properties.href]
    : undefined;
const callbackPayload = buttonPayload?.callbackPayload && lispLexer(buttonPayload?.callbackPayload);
const targetUrl = callbackPayload && preParseAction(callbackPayload, slug, isContext);
const isExternalUrl =
  (typeof targetUrl === `string` && targetUrl.substring(0, 8) === `https://`) ||
  (typeof thisAst.properties?.href === `string` &&
    thisAst.properties.href.substring(0, 8) === `https://`);

// applies only when Tag === `img`
const thisImage = payload?.imageData?.filter(
  (image: any) => image.filename === thisAst.properties?.src
)[0];
const altText =
  thisAst.properties?.alt ||
  thisImage?.altDescription ||
  `This should be descriptive text of an image | We apologize the alt text is missing.`;
const imageSrc = thisImage?.optimizedSrc || thisImage?.src || null;
const imageSrcSet = thisImage?.srcSet ? thisImage.optimizedSrc : null;

// applies only when Tag === `code`
// currently supported: YouTube, Bunny, toggle, belief, *resource not implemented
const regexpHook = /(identifyAs|signup|youtube|bunny|toggle|resource|belief)\((.*?)\)/;
const regexpValues = /((?:[^\\|]+|\\\|?)+)/g;
const thisHookRaw = thisAst?.children?.length && thisAst.children[0].value?.match(regexpHook);
const hook = thisHookRaw && typeof thisHookRaw[1] === `string` ? thisHookRaw[1] : null;
const thisHookPayload = thisHookRaw && typeof thisHookRaw[2] === `string` ? thisHookRaw[2] : null;
const thisHookValuesRaw = thisHookPayload && thisHookPayload.match(regexpValues);
const value1 = thisHookValuesRaw && thisHookValuesRaw.length ? thisHookValuesRaw[0] : null;
const value2 = thisHookValuesRaw && thisHookValuesRaw.length > 1 ? thisHookValuesRaw[1] : null;
const value3 = thisHookValuesRaw && thisHookValuesRaw.length > 2 ? thisHookValuesRaw[2] : ``;
---

{Tag === `text` ? thisAst.value : null}
{Tag === `br` ? <br /> : null}
{
  [`p`, `em`, `strong`, `ol`, `ul`, `li`, `h1`, `h2`, `h3`, `h4`, `h5`, `h6`].includes(Tag) ? (
    <Tag class={injectClassNames}>
      {thisAst?.children?.map((p: any, childIdx: number) => (
        <Astro.self
          payload={{ ...payload, ast: [p] }}
          thisClassNames={thisClassNames}
          paneId={paneId}
          slug={slug}
          isContext={isContext}
          idx={!idx ? childIdx : idx}
          outerIdx={outerIdx}
          markdownLookup={markdownLookup}
        />
      ))}
    </Tag>
  ) : null
}
{
  Tag === `a` && isExternalUrl ? (
    <a
      target="_blank"
      rel="noreferrer"
      class={`whitespace-nowrap truncate ${buttonPayload?.className || injectClassNames}`}
      href={targetUrl || thisAst.properties.href}
    >
      {thisAst.children[0].value}
      <span
        class="ml-0.5"
        style="display: inline-block; vertical-align: middle; width: 1em; height: 1em;"
        title="External link"
      >
        <svg
          version="1.1"
          id="ExternalLink"
          xmlns="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          width="20"
          height="16"
          viewBox="0 0 20 16"
        >
          <rect x="0" y="0" width="20" height="16" fill="none" />
          <g transform="translate(2, 0) scale(0.12)">
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M122.88,35.289L87.945,70.578v-17.58c-22.091-4.577-39.542,0.468-52.796,17.271 c2.301-34.558,25.907-51.235,52.795-52.339L87.945,0L122.88,35.289L122.88,35.289z"
            />
            <path d="M6.908,23.746h35.626c-4.587,3.96-8.71,8.563-12.264,13.815H13.815v62.943h80.603V85.831l13.814-13.579v35.159 c0,3.814-3.093,6.907-6.907,6.907H6.908c-3.815,0-6.908-3.093-6.908-6.907V30.653C0,26.838,3.093,23.746,6.908,23.746L6.908,23.746 z" />
          </g>
        </svg>
      </span>
    </a>
  ) : null
}
{
  Tag === `a` &&
  !isExternalUrl &&
  buttonPayload &&
  thisAst.children[0].type === `text` &&
  thisAst.children[0].value ? (
    <AstToButton
      client:visible
      className={`whitespace-nowrap truncate ${buttonPayload.className || ``}`}
      callbackPayload={callbackPayload}
      targetUrl={targetUrl}
      slug={slug}
      paneId={paneId}
      text={thisAst.children[0].value}
    />
  ) : null
}
{
  Tag === `img` && imageSrc && imageSrcSet ? (
    <img
      class={injectClassNames}
      src={imageSrcSet.split(" ")[0]}
      srcset={imageSrcSet}
      alt={altText}
    />
  ) : Tag === `img` && imageSrc ? (
    <img class={injectClassNames} src={imageSrc} alt={altText} />
  ) : null
}
{
  Tag === `code` && hook === `youtube` && value1 && value2 ? (
    <div class={injectClassNames}>
      <YouTubeWrapper client:only embedCode={value1} title={value2} />
    </div>
  ) : null
}
{
  Tag === `code` && hook === `bunny` && value1 && value2 ? (
    <div class={injectClassNames}>
      <BunnyVideo videoUrl={value1} title={value2} />
    </div>
  ) : null
}
{
  Tag === `code` && hook === `signup` && value1 ? (
    <div class={injectClassNames}>
      <SignUp
        client:load
        persona={value1 ?? "Major Updates Only"}
        prompt={value2 ?? "Keep in touch!"}
        clarifyConsent={value3 === "true"}
      />
    </div>
  ) : null
}
{
  Tag === `code` && hook === `belief` && value1 && value2 ? (
    <div class={injectClassNames}>
      <Belief client:visible value={{ slug: value1, scale: value2, extra: value3 }} />
    </div>
  ) : null
}
{
  Tag === `code` && hook === `identifyAs` && value1 && value2 ? (
    <IdentifyAs
      client:visible
      value={{ slug: value1, target: value2, extra: value3 }}
      classNames={injectClassNames}
    />
  ) : null
}
{
  Tag === `code` && hook === `toggle` && value1 && value2 ? (
    <div class={injectClassNames}>
      <ToggleBelief client:visible belief={value1} prompt={value2} />
    </div>
  ) : null
}
