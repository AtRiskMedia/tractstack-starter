---
import { Home } from "./icons/Home";
import Menu from "./Menu";
import { getCtx } from "../../store/nodes";
import { RememberMe } from "./state/RememberMe";
import { OpenStoryKeep } from "./nav/OpenStoryKeep";
import { ConfigureStoryKeep } from "./nav/ConfigureStoryKeep";
import ImpressionWrapper from "./widgets/ImpressionWrapper";
import type { AuthStatus, MenuDatum, ImpressionDatum, Config } from "../../types";

export interface Props {
  title: string;
  slug: string;
  user: AuthStatus;
  config: Config;
  menu?: MenuDatum | null;
  menuId?: string | null;
  impressions?: ImpressionDatum[];
  isContext: boolean;
  isStoryKeep?: boolean;
  isEditable?: boolean;
}

const {
  title,
  slug,
  user,
  isContext,
  menu,
  menuId,
  impressions,
  isStoryKeep = false,
  isEditable = false,
  config,
} = Astro.props;
const isHome = slug === config?.init?.HOME_SLUG;
const logo = (typeof config?.init?.LOGO === "string" && config?.init?.LOGO) || "/logo.svg";
const logoIsSvg = logo.includes("svg");
const wordmark =
  (typeof config?.init?.WORDMARK === "string" && config?.init?.WORDMARK) || "/wordmark.svg";
const wordmarkIsSvg = wordmark.includes("svg");
const menuPayload = typeof menuId === `string` ? getCtx().getMenuNodeById(menuId) : menu;
console.log(user);
---

<header class="relative bg-white shadow-inner">
  <div class="flex flex-row flex-nowrap items-center justify-between py-3 px-4 md:px-8">
    <a href="/" title="Home page">
      <div class="flex flex-row flex-nowrap items-center h-auto">
        {
          [`default`, `logo`].includes(config?.init?.WORDMARK_MODE) ? (
            <>
              {logoIsSvg ? (
                <object
                  type="image/svg+xml"
                  data={logo}
                  class="h-8 w-auto pointer-events-none"
                  aria-label="Logo"
                >
                  Logo
                </object>
              ) : (
                <img src={logo} class="h-8 w-auto pointer-events-none" alt="Logo" />
              )}
              <span class="w-2" />
            </>
          ) : null
        }
        {
          [`default`, `wordmark`].includes(config?.init?.WORDMARK_MODE) ? (
            wordmarkIsSvg ? (
              <object
                type="image/svg+xml"
                data={wordmark}
                aria-label="Wordmark"
                class="h-14 w-auto max-w-48 md:max-w-72 pointer-events-none"
              >
                Wordmark
              </object>
            ) : (
              <img
                src={wordmark}
                alt="Wordmark"
                class="h-14 w-auto max-w-48 md:max-w-72 pointer-events-none"
              />
            )
          ) : null
        }
      </div>
    </a>
    {
      !!menuPayload ? (
        <Menu payload={menuPayload} slug={slug} isContext={isContext} config={config} client:load />
      ) : null
    }
  </div>
  <div
    class="flex flex-row flex-nowrap justify-between pt-4 pb-3
px-4 md:px-8 bg-mywhite shadow-inner"
  >
    <h1 class="text-mydarkgrey truncate text-xl" title={title}>{title}</h1>
    <div class="flex flex-row flex-nowrap gap-x-2">
      {
        !isHome && !isStoryKeep ? (
          <a
            href="/"
            class="text-myblue/80 hover:text-myblue hover:rotate-6"
            title="Go to home page"
          >
            <Home classes="w-6 h-6" />
          </a>
        ) : !isHome && isStoryKeep ? (
          <a
            data-astro-reload
            href="/"
            class="text-myblue/80 hover:text-myblue hover:rotate-6"
            title="Go to home page"
          >
            <Home classes="w-6 h-6" />
          </a>
        ) : null
      }
      {
        slug !== `storykeep` && (user?.isAuthenticated || user?.isOpenDemo) ? (
          <OpenStoryKeep
            slug={slug}
            isContext={isContext}
            isStoryKeep={isStoryKeep}
            isEditable={isEditable}
            client:load
          />
        ) : slug === `storykeep` && user?.isAdmin ? (
          <ConfigureStoryKeep client:load />
        ) : null
      }
      <RememberMe client:load />
      {
        impressions?.length ? (
          <ImpressionWrapper
            payload={impressions}
            icon={true}
            isContext={isContext}
            slug={slug}
            config={config}
            client:load
          />
        ) : null
      }
    </div>
  </div>
</header>
