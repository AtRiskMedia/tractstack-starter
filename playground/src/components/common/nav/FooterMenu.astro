---
import { preParseAction } from "../../../utils/concierge/preParse_Action";
import { lispLexer } from "../../../utils/concierge/lispLexer";
import type { Config, MenuDatum, MenuLink, MenuLinkDatum } from "../../../types";

interface Props {
  payload: MenuDatum;
  slug: string;
  isContext: boolean;
  config: Config;
}

const { payload, slug, isContext, config } = Astro.props;
const thisPayload = payload.optionsPayload;
const additionalLinks = thisPayload
  .filter((e: MenuLink) => !e.featured)
  .map((e: MenuLink) => {
    const item = { ...e } as MenuLinkDatum;
    const thisPayload = lispLexer(e.actionLisp);
    const to = preParseAction(thisPayload, slug, isContext, config);
    if (typeof to === `string`) {
      item.to = to;
      item.internal = true;
    } else if (typeof to === `object`) item.to = to[0];
    return item;
  });
const featuredLinks = thisPayload
  .filter((e: MenuLink) => e.featured)
  .map((e: MenuLink) => {
    const item = { ...e } as MenuLinkDatum;
    const thisPayload = lispLexer(e.actionLisp);
    const to = preParseAction(thisPayload, slug, isContext, config);
    if (typeof to === `string`) {
      item.to = to;
      item.internal = true;
    } else if (typeof to === `object`) item.to = to[0];
    return item;
  });
const allLinks = additionalLinks.concat(featuredLinks);
---

<div class="mx-auto max-w-4xl py-12 px-4">
  <nav class="flex flex-wrap justify-center gap-4">
    {
      allLinks.map((item: MenuLinkDatum) => (
        <a
          href={item.to}
          class={
            "px-3.5 py-1.5 rounded text-lg shadow-sm transition-colors z-10 whitespace-nowrap " +
            (item.featured
              ? "bg-cyan-700 text-white hover:bg-myblack hover:text-white focus:bg-cyan-700 focus:text-white"
              : "bg-white text-cyan-700 hover:bg-myblack hover:text-white focus:bg-cyan-700 focus:text-white")
          }
          title={item.description}
        >
          <span class="font-bold">{item.name}</span>
        </a>
      ))
    }
  </nav>
</div>
