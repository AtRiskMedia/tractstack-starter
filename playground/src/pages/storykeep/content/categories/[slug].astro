---
import { getAPIContext } from "@/utils/api/astroContext";
import { getConfig, validateConfig } from "@/utils/core/config.ts";
import { getResourcesByCategorySlugRowData, getFullContentMap } from "@/utils/db/turso.ts";
import { NodesDeserializer_Json } from "@/store/nodesDeserializer_Json";
import StoryKeep from "@/layouts/StoryKeep.astro";
import Header from "@/components/common/Header.astro";
import Footer from "@/components/common/Footer.astro";
import KnownResourceEditor from "@/components/storykeep/controls/manage/KnownResourceEditor.tsx";
import type { LoadData } from "@/store/nodesSerializer";
import type { AuthStatus, MenuDatum, ResourceNode, FullContentMap } from "@/types.ts";

const { slug } = Astro.params;
const create = slug === "create";
if (!slug && !create) {
  return Astro.redirect("/404");
}

const context = getAPIContext(Astro);
const user = Astro.locals.user as AuthStatus;
const tenantId = context.locals.tenant?.id || "default";
const config = await getConfig(Astro.locals.tenant?.paths.configPath, tenantId);
const validation = await validateConfig(config);
if (!validation.isValid || !config) {
  return Astro.redirect("/storykeep/init");
}

const canonicalURL = `/storykeep/content/categories/${slug}`;
const menuPayload: MenuDatum = {
  id: `storykeep`,
  title: "Story Keep Menu",
  theme: "default",
  optionsPayload: [
    {
      name: "Dashboard",
      description: "Your Story Keep Dashboard",
      featured: true,
      actionLisp: "(goto (storykeep dashboard))",
    },
    {
      name: "Logout",
      description: "Close this session",
      featured: true,
      actionLisp: "(goto (storykeep logout))",
    },
  ],
};

// Get all the data from Turso
const resourceRowData =
  !create && slug ? await getResourcesByCategorySlugRowData(slug, context) : [];

// Initialize deserializer
const loadData: LoadData = {};
if (!create && resourceRowData.length > 0) {
  const deserializer = new NodesDeserializer_Json();
  resourceRowData.forEach((resource) => {
    deserializer.processResourceRowData(resource, loadData);
  });
}
const resourcesUsingCategory: ResourceNode[] = loadData?.resourceNodes?.length
  ? loadData.resourceNodes
  : [];

const contentMap: FullContentMap[] = await getFullContentMap(context);
---

<StoryKeep
  title={create ? "Create New Resource Category" : `Edit Resource Category: ${slug}`}
  canonicalURL={canonicalURL}
  config={config}
>
  <Header
    title={create ? "Create New Resource Category" : `Edit Resource Category: ${slug}`}
    menu={menuPayload}
    slug={`storykeep-manage-category-${slug}`}
    isContext={false}
    user={user}
    isStoryKeep={true}
    isEditable={false}
    config={config}
  />
  <main id="main-content" class="min-h-screen">
    <div class="px-1.5 pt-1.5 pb-0 pr-0 pl-1.5 py-1.5">
      <div class="py-1.5 bg-white px-3.5">
        <KnownResourceEditor
          categorySlug={create ? null : slug}
          resourcesUsingCategory={resourcesUsingCategory}
          create={create}
          contentMap={contentMap}
          client:only="react"
        />
      </div>
    </div>
  </main>
  <Footer
    menu={menuPayload}
    backToTop={true}
    slug={`storykeep-manage-category-${slug}`}
    isContext={false}
    config={config}
  />
</StoryKeep>
