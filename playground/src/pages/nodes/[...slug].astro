---
import { isValidContentPath } from "../../utils/common/routeValidation";
import { getStoryFragmentNodeBySlug, buildNodesTreeFromFragmentNodes } from "../../store/nodes";
import { getGenerateAllNodes } from "../../utils/db/nodes/generate";
import { getConfig, validateConfig } from "../../utils/core/config";
import { getStoryFragmentBySlug } from "../../utils/db/utils";
import AstroNodesRenderer from "../../components/storykeep/compositor-nodes/AstroNodesRenderer.astro";
import Layout from "../../../src/layouts/StoryKeep.astro";
import HeaderWidget from "../../custom/HeaderWidget.astro";
import Header from "../../components/common/Header.astro";
import Footer from "../../components/common/Footer.astro";
import ImpressionWrapper from "../../components/common/widgets/ImpressionWrapper";
import type { AuthStatus, Current } from "../../types";

const user = Astro.locals.user as AuthStatus;
const config = await getConfig();
const validation = await validateConfig(config);
if (!validation.isValid || !config) {
  return Astro.redirect("/storykeep/init");
}

const { slug } = Astro.params;
const lookup = slug || config?.init?.HOME_SLUG;
console.log("nodes slug: " + lookup);
if (slug === config.init?.HOME_SLUG) {
  return Astro.redirect("/");
}
if (!lookup) return Astro.redirect("/404");
if (!isValidContentPath(lookup)) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

// Generate nodes and build tree
const nodes = await getGenerateAllNodes();
buildNodesTreeFromFragmentNodes(nodes);
const storyfragmentNode = getStoryFragmentNodeBySlug(lookup);

// Get additional story fragment data
const storyfragment = await getStoryFragmentBySlug(lookup, config);
if (!storyfragment) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

const current: Current = storyfragment
  ? {
      id: storyfragment.id,
      slug: storyfragment.slug,
      title: storyfragment.title,
      parentId: storyfragment.tractStackId,
      parentSlug: storyfragment.tractStackSlug,
      parentTitle: storyfragment.tractStackTitle,
    }
  : { id: `unknown`, slug: `unknown`, title: `unknown` };
---

<Layout
  title={storyfragmentNode.title}
  pubDatetime={storyfragmentNode.created || new Date()}
  modDatetime={storyfragmentNode.changed || new Date()}
  ogImage={typeof storyfragmentNode?.socialImagePath === `string`
    ? storyfragmentNode.socialImagePath
    : undefined}
  config={config}
>
  {
    config?.init?.ENABLE_HEADER_WIDGET && (
      <HeaderWidget slug={lookup} resources={storyfragment.resourcesPayload.headerWidget} />
    )
  }

  <Header
    title={storyfragment.title}
    menu={storyfragment.menuPayload}
    slug={lookup}
    isContext={false}
    isEditable={true}
    impressions={storyfragment.impressions}
    user={user}
    config={config}
  />

  <main id="main-content" class="w-full overflow-hidden">
    <div class={storyfragment.tailwindBgColour}>
      <AstroNodesRenderer id={storyfragmentNode.id} />
    </div>
  </main>

  {
    storyfragment.impressions?.length && (
      <ImpressionWrapper
        slug={storyfragment.slug}
        isContext={true}
        payload={storyfragment.impressions}
        config={config}
        client:idle
      />
    )
  }

  <Footer
    created={storyfragment.created}
    menu={storyfragment.menuPayload}
    backToTop={true}
    slug={lookup}
    isContext={false}
    config={config}
  />
</Layout>
