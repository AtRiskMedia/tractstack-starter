---
import { getConfig, validateConfig } from "../../../utils/core/config";
import { ReactNodesWrapper } from "../../../components/storykeep/compositor-nodes/ReactNodesWrapper";
import { getCtx } from "../../../store/nodes";
import { getGenerateAllNodes } from "../../../utils/db/nodes/generate";
import StoryKeepHeader from "../../../components/storykeep/controls/StoryKeepHeader";
import StoryKeepToolBar from "../../../components/storykeep/controls/StoryKeepToolBar";
import StoryKeepToolMode from "../../../components/storykeep/controls/StoryKeepToolMode";
import SettingsPanel from "../../../components/storykeep/controls/SettingsPanel";
import StoryKeep from "../../../layouts/StoryKeep.astro";
import { NodesSerializer_Json } from "../../../store/nodesSerializer_Json";

const config = await getConfig();
const validation = await validateConfig(config);
if (!validation.isValid || !config) {
  return Astro.redirect("/storykeep/init");
}

const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");

const canonicalURL = `/${slug}`;

const nodes = await getGenerateAllNodes();
getCtx().buildNodesTreeFromFragmentNodes(nodes);

const storyfragmentNode = getCtx().getStoryFragmentNodeBySlug(slug);
if (!storyfragmentNode) {
  return Astro.redirect("/404");
}

getCtx().rootNodeId.set(storyfragmentNode.id);
const s = new NodesSerializer_Json();
s.save(getCtx());

/* Responsive Layout Whitelist - Core responsive overrides for xs/md/xl breakpoints */
// xs:flex-row xs:flex-col md:flex-row md:flex-col xl:flex-row xl:flex-col xs:hidden xs:block xs:flex xs:grid md:hidden md:block md:flex md:grid xl:hidden xl:block xl:flex xl:grid xs:grid-cols-1 xs:grid-cols-2 xs:grid-cols-3 xs:grid-cols-4 md:grid-cols-1 md:grid-cols-2 md:grid-cols-3 md:grid-cols-4 xl:grid-cols-1 xl:grid-cols-2 xl:grid-cols-3 xl:grid-cols-4 xs:text-left xs:text-center xs:text-right md:text-left md:text-center md:text-right xl:text-left xl:text-center xl:text-right
---

<StoryKeep
  title={storyfragmentNode.title}
  pubDatetime={storyfragmentNode.created || new Date()}
  modDatetime={storyfragmentNode.changed || new Date()}
  ogImage={typeof storyfragmentNode?.socialImagePath === `string`
    ? storyfragmentNode.socialImagePath
    : undefined}
  config={config}
  canonicalURL={canonicalURL}
>
  <header id="mainHeader" class="fixed top-0 left-0 right-0 bg-mywhite z-50 drop-shadow">
    <StoryKeepHeader client:load />
  </header>
  <div id="headerSpacer"></div>

  <nav
    id="mainNav"
    class="fixed bg-mywhite z-40
    left-0 right-0 pt-1.5
    md:left-0 md:top-0 md:w-16 md:h-screen md:pt-0"
  >
    <div
      class="drop-shadow
      flex flex-wrap gap-4 justify-around py-3.5
      md:flex-col md:items-center md:space-y-2 md:space-x-0 md:py-2 md:gap-8 md:mt-8"
    >
      <StoryKeepToolMode client:load />
    </div>
  </nav>
  <div id="navSpacer" class="md:hidden"></div>

  <div class="flex min-h-screen">
    <div class="hidden md:block w-16 flex-shrink-0"></div>

    <main class="flex-1 relative">
      <StoryKeepToolBar client:load />

      <div
        class="bg-myblue/20 p-4"
        style={{
          backgroundImage:
            "repeating-linear-gradient(135deg, transparent, transparent 10px, rgba(0,0,0,0.05) 10px, rgba(0,0,0,0.05) 20px)",
        }}
      >
        <ReactNodesWrapper
          bgColor={typeof storyfragmentNode.tailwindBgColour === `string`
            ? `bg-${storyfragmentNode.tailwindBgColour}`
            : ``}
          id={storyfragmentNode.id}
          nodes={nodes}
          client:only="react"
        />
      </div>
    </main>
  </div>

  <SettingsPanel config={config} client:only="react" />

  <style is:global>
    :root {
      --header-height: 0px;
    }
  </style>

  <script>
    function updateLayout() {
      const header = document.getElementById("mainHeader");
      const headerSpacer = document.getElementById("headerSpacer");
      const nav = document.getElementById("mainNav");
      const navSpacer = document.getElementById("navSpacer");
      const toolsPanel = document.getElementById("toolsPanel");
      if (header) {
        const headerHeight = header.offsetHeight;
        document.documentElement.style.setProperty("--header-height", `${headerHeight}px`);
        if (headerSpacer) {
          headerSpacer.style.height = `${headerHeight}px`;
        }
        if (nav) {
          nav.style.top = `${headerHeight}px`;
        }
      }
      if (nav && window.innerWidth < 768) {
        const navHeight = nav.offsetHeight;
        if (navSpacer) {
          navSpacer.style.height = `${navHeight}px`;
        }
        if (toolsPanel) {
          const headerHeight = header?.offsetHeight || 0;
          toolsPanel.style.top = `${headerHeight + navHeight}px`;
        }
      } else {
        if (toolsPanel && header) {
          toolsPanel.style.top = `${header.offsetHeight}px`;
        }
      }
    }
    updateLayout();
    window.addEventListener("DOMContentLoaded", updateLayout);
    window.addEventListener("load", updateLayout);
    window.addEventListener("resize", updateLayout);
    const observer = new ResizeObserver(updateLayout);
    ["mainHeader", "mainNav", "toolsPanel"].forEach((id) => {
      const element = document.getElementById(id);
      if (element) {
        observer.observe(element);
        element.querySelectorAll("*").forEach((child) => {
          observer.observe(child);
        });
      }
    });
  </script>
</StoryKeep>
