---
import { components as codeHookComponents } from "../../../custom/CodeHook.astro";
import { getConfig, validateConfig } from "../../../utils/core/config";
import { ReactNodesWrapper } from "../../../components/storykeep/compositor-nodes/ReactNodesWrapper";
import { getCtx } from "../../../store/nodes";
import { getGenerateAllNodes } from "../../../utils/db/nodes/generate";
import StoryKeepHeader from "../../../components/storykeep/controls/StoryKeepHeader";
import StoryKeepToolBar from "../../../components/storykeep/controls/StoryKeepToolBar";
import StoryKeepToolMode from "../../../components/storykeep/controls/StoryKeepToolMode";
import SettingsPanel from "../../../components/storykeep/controls/SettingsPanel";
import StoryKeep from "../../../layouts/StoryKeep.astro";
import { NodesSerializer_Json } from "../../../store/nodesSerializer_Json";

const config = await getConfig();
const validation = await validateConfig(config);
if (!validation.isValid || !config) {
  return Astro.redirect("/storykeep/init");
}
const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");

const canonicalURL = `/${slug}`;

const nodes = await getGenerateAllNodes();
getCtx().buildNodesTreeFromFragmentNodes(nodes);

const storyfragmentNode = getCtx().getStoryFragmentNodeBySlug(slug);
if (!storyfragmentNode) {
  return Astro.redirect("/404");
}

getCtx().rootNodeId.set(storyfragmentNode.id);
const s = new NodesSerializer_Json();
s.save(getCtx());
---

<StoryKeep
  title={storyfragmentNode.title}
  pubDatetime={storyfragmentNode.created || new Date()}
  modDatetime={storyfragmentNode.changed || new Date()}
  ogImage={typeof storyfragmentNode?.socialImagePath === `string`
    ? storyfragmentNode.socialImagePath
    : undefined}
  config={config}
  canonicalURL={canonicalURL}
>
  <header id="mainHeader" class="fixed top-0 left-0 right-0 bg-mywhite z-[8999] drop-shadow">
    <StoryKeepHeader client:load />
  </header>
  <div id="headerSpacer"></div>

  <div class="flex min-h-screen">
    <nav
      id="mainNav"
      class="fixed bg-mywhite z-40
      left-0 right-0 pt-1.5
      md:left-0 md:top-0 md:w-16 md:h-screen md:pt-0"
    >
      <div
        class="drop-shadow
        flex flex-wrap gap-4 justify-around py-3.5
        md:flex-col md:items-center md:space-y-2 md:space-x-0 md:py-2 md:gap-8 md:mt-8"
      >
        <StoryKeepToolMode client:load />
      </div>
    </nav>

    <nav id="toolbarNav" class="fixed z-30">
      <StoryKeepToolBar client:load />
    </nav>

    <div class="hidden md:block w-16 flex-shrink-0"></div>

    <main class="flex-1 relative">
      <div
        class="bg-myblue/20 pt-4 px-4 pb-28"
        style={{
          backgroundImage:
            "repeating-linear-gradient(135deg, transparent, transparent 10px, rgba(0,0,0,0.05) 10px, rgba(0,0,0,0.05) 20px)",
        }}
      >
        <ReactNodesWrapper
          bgColor={typeof storyfragmentNode.tailwindBgColour === `string`
            ? `bg-${storyfragmentNode.tailwindBgColour}`
            : ``}
          id={storyfragmentNode.id}
          nodes={nodes}
          client:only="react"
        />
      </div>
    </main>
  </div>

  <div id="navSpacer" class="md:hidden"></div>

  <SettingsPanel
    config={config}
    availableCodeHooks={Object.keys(codeHookComponents)}
    client:only="react"
  />

  <style is:global>
    :root {
      --header-height: 0px;
    }
  </style>

  <script>
    function updateLayout() {
      const header = document.getElementById("mainHeader");
      const headerSpacer = document.getElementById("headerSpacer");
      const nav = document.getElementById("mainNav");
      const navSpacer = document.getElementById("navSpacer");
      const toolbarNav = document.getElementById("toolbarNav");

      if (header) {
        const headerHeight = header.offsetHeight;
        document.documentElement.style.setProperty("--header-height", `${headerHeight}px`);
        if (headerSpacer) {
          headerSpacer.style.height = `${headerHeight}px`;
        }
        if (nav) {
          nav.style.top = `${headerHeight}px`;
        }
      }

      if (nav && window.innerWidth < 768) {
        const navHeight = nav.offsetHeight;
        if (navSpacer) {
          navSpacer.style.height = `${navHeight}px`;
        }
      }

      if (toolbarNav) {
        const headerHeight = header?.offsetHeight || 0;
        const navHeight = window.innerWidth < 768 ? nav?.offsetHeight || 0 : 0;
        toolbarNav.style.bottom = "0";
        toolbarNav.style.left = window.innerWidth < 768 ? "0" : "4rem"; // 4rem = 64px = md:w-16
      }
    }

    updateLayout();
    window.addEventListener("DOMContentLoaded", updateLayout);
    window.addEventListener("load", updateLayout);
    window.addEventListener("resize", updateLayout);
    const observer = new ResizeObserver(updateLayout);
    ["mainHeader", "mainNav", "toolbarNav"].forEach((id) => {
      const element = document.getElementById(id);
      if (element) {
        observer.observe(element);
        element.querySelectorAll("*").forEach((child) => {
          observer.observe(child);
        });
      }
    });
  </script>
</StoryKeep>
