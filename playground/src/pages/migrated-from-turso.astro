---
import AstroNodesRenderer from "@/components/storykeep/compositor-nodes/AstroNodesRenderer.astro";
import Layout from "@/layouts/Layout.astro";
import { getConfig } from "@/utils/core/config.ts";
import { getCtx } from "@/store/nodes";
import { NodesDeserializer_Json } from "@/store/nodesDeserializer_Json";
import { getStoryFragmentBySlugFullRowData, getFullContentMap } from "@/utils/db/turso.ts";
import type { LoadData } from "@/store/nodesSerializer.ts";

// Get the story fragment slug - in real implementation this would come from URL params
const lookup = `hello`;

// Get all the data from Turso
const fullData = await getStoryFragmentBySlugFullRowData(lookup);

if (!fullData) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

// Initialize deserializer
const deserializer = new NodesDeserializer_Json();

// Create LoadData structure
const loadData: LoadData = {
  files: [],
  menus: [],
  resources: [],
  storyfragments: [],
  panes: [],
  tractstacks: [],
  childNodes: [],
};

// Process each type of data using deserializer
deserializer.processTractStackRowData(fullData.tractstack, loadData);
deserializer.processStoryFragmentRowData(fullData.storyfragment, loadData);

// Process panes and their related data
fullData.panes.forEach((pane) => {
  deserializer.processPaneRowData(pane, loadData);
});

if (fullData.menu) {
  deserializer.processMenuRowData(fullData.menu, loadData);
}

//fullData.files.forEach((file) => {
//  deserializer.processImageFileRowData(file, loadData);
//});

// Build the node tree from the loaded data
getCtx().buildNodesTreeFromRowDataMadeNodes(loadData);

// Get the story fragment node for rendering
const storyfragmentNode = getCtx().getStoryFragmentNodeBySlug(lookup);
if (!storyfragmentNode) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

const config = await getConfig();
const contentMap = await getFullContentMap();
console.log(contentMap);
---

<Layout
  title={storyfragmentNode.title}
  pubDatetime={storyfragmentNode.created || new Date()}
  modDatetime={storyfragmentNode.changed || new Date()}
  ogImage={typeof storyfragmentNode?.socialImagePath === `string`
    ? storyfragmentNode.socialImagePath
    : undefined}
  config={config!}
>
  <main id="main-content" class="w-full overflow-hidden">
    <div
      class={typeof storyfragmentNode.tailwindBgColour === `string`
        ? `bg-${storyfragmentNode.tailwindBgColour}`
        : ``}
    >
      <AstroNodesRenderer id={storyfragmentNode.id} />
    </div>
  </main>
</Layout>
