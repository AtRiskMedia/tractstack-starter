---
import { getAPIContext } from "@/utils/api/astroContext";
import { getConfig, validateConfig } from "@/utils/core/config.ts";
import StoryKeep from "@/layouts/StoryKeep.astro";
import StoryKeepNav from "@/components/storykeep/controls/dashboard/StoryKeepNav";
import Header from "@/components/common/Header.astro";
import Footer from "@/components/common/Footer.astro";
import ImpressionWrapper from "@/components/common/widgets/ImpressionWrapper.tsx";
import BrowseContent from "@/components/storykeep/controls/dashboard/BrowseContent.tsx";
import PullDashboardAnalytics from "@/components/storykeep/controls/state/PullDashboardAnalytics.tsx";
import VersionCheck from "@/components/storykeep/init/VersionCheck.tsx";
import SelectHome from "@/components/storykeep/controls/dashboard/SelectHome.tsx";
import ManageContent from "@/components/storykeep/controls/dashboard/ManageContent.tsx";
import PageViewStats from "@/components/storykeep/controls/dashboard/PageViewStats.tsx";
import { getFullContentMap } from "@/utils/db/turso.ts";
import { isOpenDemoMode } from "@/utils/core/auth.ts";
import { getRemoteVersionInfo } from "@/store/versionCache";
import type { FullContentMap, AuthStatus, ImpressionDatum, MenuDatum } from "@/types.ts";

const context = getAPIContext(Astro);
const user = Astro.locals.user as AuthStatus;
const tenantId = context.locals.tenant?.id || "default";
const config = await getConfig(Astro.locals.tenant?.paths.configPath, tenantId);
const validation = await validateConfig(config);
const isDemoMode = isOpenDemoMode(Astro, config);
const isPreviewMode = !validation.capabilities.hasTurso || !validation.capabilities.hasConcierge;
if (!validation.isValid || !config) {
  return Astro.redirect("/storykeep/init");
}
const canonicalURL = `/storykeep`;

const payload = await getFullContentMap(context);
const filterPayload = payload.filter(
  (e: FullContentMap) => e.type === `StoryFragment` || (e.type === `Pane` && e.isContext)
);
if (!payload) {
  return Astro.redirect("/404");
}

const links = [];
if ((user?.isAdmin || isPreviewMode) && !isDemoMode)
  links.unshift({
    name: "Advanced Setup",
    description: "Your Story Keep Settings",
    featured: true,
    actionLisp: "(goto (storykeep settings))",
  });
if ((!user?.isAuthenticated && !isPreviewMode) || isDemoMode)
  links.unshift({
    name: "Login",
    description: "Enter your Story Keep",
    featured: true,
    actionLisp: "(goto (storykeep login))",
  });
if (user?.isAuthenticated)
  links.unshift({
    name: "Logout",
    description: "Close this session",
    featured: true,
    actionLisp: "(goto (storykeep logout))",
  });

const menuPayload = {
  id: `storykeep`,
  title: "Story Keep Menu",
  theme: "default",
  optionsPayload: links,
} as MenuDatum;

// impression
const impressions = user.isOpenDemo
  ? [
      {
        id: `storykeep`,
        parentId: `storykeep`,
        title: "Would you like your website to be built with Tract Stack?",
        body: "We offer Tract Stack as a service with premium agency support.",
        actionLisp: "",
        buttonText: "Interested!",
        actionsLisp: "(goto (url https://tractstack.com/#pricing))",
      },
    ]
  : ([] as ImpressionDatum[]);

const remoteVersionInfo = await getRemoteVersionInfo();
---

<StoryKeep title="Welcome to your Story Keep" canonicalURL={canonicalURL} config={config}>
  {
    user.isOpenDemo ? (
      <div class="my-1 pt-2 shadow-inner px-1">
        <span class="inline-flex items-center rounded-md bg-mygreen/20 px-4 py-1 text-sm text-black w-full justify-center">
          <span class="font-bold">Demo Mode:</span> &nbsp; No changes will be saved. Reload the page
          in your browser to reset. Have fun and explore!
        </span>
      </div>
    ) : isPreviewMode ? (
      <div class="my-1 pt-2 shadow-inner px-1">
        <span class="inline-flex items-center rounded-md bg-mygreen/20 px-4 py-1 text-lg text-black w-full justify-center">
          <div>
            <span class="font-bold">Preview Mode:</span>
            For a production install of Tract Stack please see{" "}
            <a
              class="underline hover:text-black"
              href="https://tractstack.org/start/license"
              title="Tract Stack Source Available License"
              target="_blank"
            >
              our docs
            </a>
            . For easy and professional managed hosting please visit{" "}
            <a
              class="underline hover:text-black"
              href="https://tractstack.com/#pricing"
              title="Tract Stack Pricing"
              target="_blank"
            >
              Tract Stack Pricing
            </a>
          </div>
        </span>
      </div>
    ) : null
  }
  <Header
    title="free web press"
    menu={menuPayload}
    slug="storykeep"
    isContext={false}
    impressions={impressions}
    user={user}
    isStoryKeep={true}
    config={config}
  />
  <PullDashboardAnalytics client:only="react" />
  <main id="main-content" class="min-h-screen">
    <div class="px-1.5 pt-1.5 pb-0 pr-0 pl-1.5 py-1.5">
      <div class="py-1.5 bg-white px-3.5">
        <div class="flex flex-col gap-y-12 mx-auto max-w-screen-xl">
          {
            user.isAdmin && validation.capabilities.hasConcierge && (
              <VersionCheck
                client:only="react"
                remoteVersionInfo={remoteVersionInfo}
                hasConcierge={validation.capabilities.hasConcierge}
              />
            )
          }
          <StoryKeepNav client:only="react" />
          <PageViewStats client:only="react" />
          <SelectHome contentMap={filterPayload} config={config} client:only="react" />
          <BrowseContent contentMap={filterPayload} client:only="react" />
          <ManageContent client:only="react" />
        </div>
      </div>
    </div>
  </main>
  {
    impressions?.length ? (
      <ImpressionWrapper
        slug={`storykeep`}
        isContext={false}
        payload={impressions}
        config={config}
        client:only="react"
      />
    ) : null
  }
  <Footer
    menu={menuPayload}
    backToTop={true}
    slug={`storykeep`}
    isContext={false}
    config={config}
  />
</StoryKeep>
