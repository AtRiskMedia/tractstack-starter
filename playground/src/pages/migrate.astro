---
import { getCtx } from "@/store/nodes";
import { getGenerateAllNodes } from "@/utils/db/migrate/generate";
import { NodesSerializer_Json } from "@/store/nodesSerializer_Json";
import { NodesDeserializer_Json } from "@/store/nodesDeserializer_Json";
import type {
  TractStackRowData,
  StoryFragmentRowData,
  MenuRowData,
  ResourceRowData,
  PaneRowData,
  ImageFileRowData,
  SaveData,
  StoryFragmentPaneRowData,
  LoadData,
} from "@/store/nodesSerializer.ts";

// uses old data source + helper fn to generate as new datum
const nodes = await getGenerateAllNodes();
// create node tree
getCtx().buildNodesTreeFromFragmentNodes(nodes);
// initialize serializer
const s = new NodesSerializer_Json();
// generate save data for all nodes (migrate to new data model)
const saveData: SaveData | null = nodes ? s.migrateAll(getCtx(), nodes) : null;
// now we need to convert saveData back to nodes
getCtx().clearAll();

// initialize deserializer
const d = new NodesDeserializer_Json();
const loadData: LoadData = {
  files: [],
  menus: [],
  resources: [],
  storyfragments: [],
  panes: [],
  tractstacks: [],
};

saveData?.tractstacks.forEach((n: TractStackRowData) => {
  d.processTractStackRowData(n, loadData);
});

saveData?.storyfragments.forEach((n: StoryFragmentRowData) => {
  const fragmentPanes =
    saveData.storyfragmentPanes && typeof saveData.storyfragmentPanes === "object"
      ? (saveData.storyfragmentPanes as StoryFragmentPaneRowData)[n.id] || []
      : [];
  d.processStoryFragmentRowData(n, fragmentPanes, loadData);
});

saveData?.panes.forEach((n: PaneRowData) => {
  d.processPaneRowData(n, loadData);
});

saveData?.menus.forEach((n: MenuRowData) => {
  d.processMenuRowData(n, loadData);
});

saveData?.files.forEach((n: ImageFileRowData) => {
  d.processImageFileRowData(n, loadData);
});

saveData?.resources.forEach((n: ResourceRowData) => {
  d.processResourceRowData(n, loadData);
});

const dump = JSON.stringify(loadData);
---

<h2>new data modal as though loaded from turso</h2>
<pre>
{dump}
</pre>
