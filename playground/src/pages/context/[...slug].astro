---
import { getContextPaneBySlug } from "../../utils/db/utils";
import { isValidContentPath } from "../../utils/common/routeValidation";
import { getConfig, validateConfig } from "../../utils/core/config";
import ContextPaneWrapper from "../../components/frontend/ContextPaneWrapper.astro";
import ImpressionWrapper from "../../components/common/widgets/ImpressionWrapper";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/common/Header.astro";
import Footer from "../../components/common/Footer.astro";
import type { Current, AuthStatus } from "../../types";

const user = Astro.locals.user as AuthStatus;
const config = await getConfig();
const validation = await validateConfig(config);
if (!validation.isValid || !config) {
  return Astro.redirect("/storykeep/init");
}

// validate context pane?
const { slug } = Astro.params;
if (!isValidContentPath(slug)) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

// valid datum?
const pane = slug ? await getContextPaneBySlug(slug) : null;
if (!pane || !pane.panePayload) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}
const current: Current = pane
  ? {
      id: pane.id,
      slug: pane.slug,
      title: pane.title,
    }
  : { id: `unknown`, slug: `unknown`, title: `unknown` };
---

<Layout title={pane.title} pubDatetime={pane.created} modDatetime={pane.changed} config={config}>
  <Header
    title={pane.title}
    slug={pane.slug}
    isContext={true}
    isEditable={true}
    impressions={pane.impressions}
    user={user}
    config={config}
  />
  <main id="main-content" class="min-h-screen">
    <ContextPaneWrapper
      pane={pane.panePayload}
      resources={pane.resourcesPayload}
      codeHookOptions={pane.codeHookOptions}
      current={current}
      config={config}
    />
  </main>
  {
    pane.impressions?.length ? (
      <ImpressionWrapper
        payload={pane.impressions}
        slug={pane.slug}
        isContext={true}
        config={config}
        client:load
      />
    ) : null
  }
  <Footer created={pane.created} slug={pane.slug} isContext={true} config={config} />
</Layout>
